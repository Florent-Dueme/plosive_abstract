# summary(PI_f)
tab_model(PI_f)
anova(PI_f, PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Task*Group*Grapheme + Gender + (Task|Speaker) + (Grapheme|Speaker) + (Group|Word), data = french, contrasts = list(Task=contrast_mat))
# After removing the interactions involving Task and some of the random slopes, the model does converge
PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
contrasts = list(Task=contrast_mat))
# summary(PI_f)
tab_model(PI_f)
anova(PI_f, PI_f_no_convergence)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en") # Set error language to English
library(tidyverse)
library(ggplot2)
library(lme4)
library(emmeans)
library(rstatix) # Function rstatix::convert_as_factor
library(MASS) # Function MASS::fractions
library(sjPlot) # Function sjPlot::tab_model
data = as.data.frame(read.csv("all_data_burst_24_01_2022.csv", sep=";"),header=T,sep=";",dec=".")
data$Plosion_index = as.numeric(data$Plosion_index)
data$VOT = as.numeric(data$VOT)
data$Length = as.numeric(data$Length)
str(data)
# Separate data by language
french <- data[data$Language=="French",]
spanish <- data[data$Language=="Spanish",]
# Make factors
french <- french %>% convert_as_factor(Speaker, Gender, Group, Task, Grapheme, Word)
french$Group <- relevel(french$Group, 'Monolinguals')
french$Grapheme <- relevel(french$Grapheme, 'b')
spanish <- spanish %>% convert_as_factor(Speaker, Gender, Group, Task, Grapheme, Word)
spanish$Group <- relevel(spanish$Group, 'Monolinguals')
spanish$Grapheme <- relevel(spanish$Grapheme, 'b')
str(french)
str(spanish)
# Create contrasts
F_VS_M <- c(-1, 1)
Mono_VS_Bi <- c(-1, 1)
b_VS_v <- c(-1, 1)
contrasts(french$Gender) <- F_VS_M
contrasts(french$Group) <- Mono_VS_Bi
contrasts(french$Grapheme) <- b_VS_v
contrasts(spanish$Gender) <- F_VS_M
contrasts(spanish$Group) <- Mono_VS_Bi
contrasts(spanish$Grapheme) <- b_VS_v
# Custom contrast for task
Contrasts <- rbind(
Naming_Vs_Reading = c(name=2, PW=-1, read=-1),
Word_VS_PW = c(name=0, PW=1, read=-1)
)
# fractions(t(Contrasts))
# Function to calculate general inverse
ginv2 <- function(x)
fractions(provideDimnames(ginv(x),
base=dimnames(x)[2:1]))
contrast_mat <- ginv2(Contrasts)
# contrast_mat
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Task*Group*Grapheme + Gender + (Task|Speaker) + (Grapheme|Speaker) + (Group|Word), data = french, contrasts = list(Task=contrast_mat))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f)
summary(PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Task*Group*Grapheme + Gender + (Task|Speaker) + (Grapheme|Speaker), data = french, contrasts = list(Task=contrast_mat))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
# tab_model(PI_f)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Task*Group*Grapheme + Gender + (Grapheme|Speaker), data = french, contrasts = list(Task=contrast_mat))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
# tab_model(PI_f)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Task*Group*Grapheme + Gender, data = french, contrasts = list(Task=contrast_mat))
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Task*Group*Grapheme + Gender + 1|Speaker + 1|Word, data = french, contrasts = list(Task=contrast_mat))
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Task*Group*Grapheme + Gender + (1|Speaker) + (1|Word), data = french, contrasts = list(Task=contrast_mat))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
# tab_model(PI_f)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Task*Group*Grapheme + Gender + (1|Speaker) + (1|Word), data = french, contrasts = contr.sum())
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Task*Group*Grapheme + Gender + (1|Speaker) + (1|Word), data = french, contrasts = contr.sum(3))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
# tab_model(PI_f)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme + Task + Gender + (1|Speaker) + (1|Word), data = french, contrasts = contr.sum(3))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
# tab_model(PI_f)
tab_model(PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme + Task + Gender + (1|Speaker) + (1|Word), data = french, contrasts = list(Task = contr.sum(3)))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (1|Speaker) + (1|Word), data = french, contrasts = list(Task = contr.sum(3)))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
help("convergence")
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (1|Speaker) + (1|Word), data = french, contrasts = list(Task = contr.sum(3)))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (1|Word), data = french, contrasts = list(Task = contr.sum(3)))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (Group|Word), data = french, contrasts = list(Task = contr.sum(3)))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (Group|Word), data = french, contrasts = list(Task = contr.sum(3)), glmerControl(optimizer="bobyqa"))
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (Group|Word), data = french,
glmerControl(optimizer="bobyqa"), contrasts = list(Task = contr.sum(3)))
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (Group|Word), data = french,
optimizer="bobyqa", contrasts = list(Task = contr.sum(3)))
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (Group|Word), data = french, contrasts = list(Task = contr.sum(3)))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
PI_s <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (1|Word), data = spanish,
contrasts = list(Task=contrast_mat))
# PI_s <-lmer(log(Plosion_index) ~ Group*Grapheme + Task + Gender + (Grapheme|Speaker) + (Group|Word), data = spanish,
#             contrasts = list(Task=contrast_mat))
summary(PI_s)
tab_model(PI_s)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (1|Word), data = french, contrasts = list(Task = contr.sum(3)))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (1|Word), data = french,
contrasts = list(Task = contr.sum(3)), control=lmerControl(optCtrl=list(maxfun=20000)))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (Group|Word), data = french,
contrasts = list(Task = contr.sum(3)), control=lmerControl(optCtrl=list(maxfun=20000)))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (Group|Word), data = french,
contrasts = list(Task = contr.sum(3)), control=lmerControl(optCtrl=list(maxfun=20000), optimizer="bobyqa"))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
# The full model fails to converge
PI_f_no_convergence <-lmer(log(Plosion_index) ~ Group*Grapheme*Task + Gender + (Grapheme|Speaker) + (Group|Word), data = french,
contrasts = list(Task = contr.sum(3)), control=lmerControl(optCtrl=list(maxfun=50000), optimizer="bobyqa"))
# After removing the interactions involving Task and some of the random slopes, the model does converge
# PI_f <-lmer(log(Plosion_index) ~ Group*Grapheme + Gender + Task + (Grapheme|Speaker) + (1|Word), data = french,
#             contrasts = list(Task=contrast_mat))
summary(PI_f_no_convergence)
tab_model(PI_f_no_convergence)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en") # Set error language to English
library(tidyverse)
library(ggplot2)
library(lme4)
library(emmeans)
library(rstatix) # Function rstatix::convert_as_factor
library(MASS) # Function MASS::fractions
library(sjPlot) # Function sjPlot::tab_model
data = as.data.frame(read.csv("all_data_burst_24_01_2022.csv", sep=";"),header=T,sep=";",dec=".")
data$Plosion_index = as.numeric(data$Plosion_index)
data$VOT = as.numeric(data$VOT)
data$Length = as.numeric(data$Length)
str(data)
# Make factors
data <- data %>% convert_as_factor(Speaker, Gender, Group, Task, Grapheme, Word)
data$Group <- relevel(data$Group, 'Monolinguals')
data$Grapheme <- relevel(data$Grapheme, 'b')
str(data)
# Create contrasts
F_VS_M <- c(-1, 1)
Mono_VS_Bi <- c(-1, 1)
b_VS_v <- c(-1, 1)
contrasts(data$Gender) <- F_VS_M
contrasts(data$Group) <- Mono_VS_Bi
contrasts(data$Grapheme) <- b_VS_v
# Custom contrast for task
Contrasts <- rbind(
Naming_Vs_Reading = c(name=2, PW=-1, read=-1),
Word_VS_PW = c(name=0, PW=1, read=-1)
)
# fractions(t(Contrasts))
# Function to calculate general inverse
ginv2 <- function(x)
fractions(provideDimnames(ginv(x),
base=dimnames(x)[2:1]))
contrast_mat <- ginv2(Contrasts)
# contrast_mat
# Separate data by language
french <- data[data$Language=="French",]
spanish <- data[data$Language=="Spanish",]
# Separate data by Group
bi <- data[data$Group=="Bilinguals",]
mono <- data[data$Group=="Monolinguals",]
bi_b <- bi[bi$Grapheme=="b"]
View(bi)
# Separate data by language
french <- data[data$Language=="French",]
spanish <- data[data$Language=="Spanish",]
# Separate data by Group
bi <- data[data$Group=="Bilinguals",]
mono <- data[data$Group=="Monolinguals",]
bi_b <- bi[bi$Grapheme=="b",]
mono_b <- mono[mono$Grapheme=="b",]
french_b <- french[french$Grapheme=="b",]
spanish_b <- spanish[spanish$Grapheme=="b",]
PI_bi <-lmer(log(Plosion_index) ~ Language*Task + Gender + (1 + Language + Task|Speaker), data = bi_b, contrasts = list(Task=contrast_mat))
# summary(PI_bi)
tab_model(PI_bi, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
PI_fr <-lmer(log(Plosion_index) ~ Group*Task + Gender + (1 + Language + Task|Speaker), data = french_b, contrasts = list(Task=contrast_mat))
PI_bi <-lmer(log(Plosion_index) ~ Language*Task + Gender + (1 + Language + Task|Speaker) + (1| Word), data = bi_b, contrasts = list(Task=contrast_mat))
# summary(PI_bi)
tab_model(PI_bi, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
PI_fr <-lmer(log(Plosion_index) ~ Group*Task + Gender + (1 + Task|Speaker) + (1 + Group| Word), data = french_b, contrasts = list(Task=contrast_mat))
# summary(PI_fr)
tab_model(PI_fr, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
PI_sp <-lmer(log(Plosion_index) ~ Group*Task + Gender + (1 + Task|Speaker) + (1 + Group| Word), data = spanish_b, contrasts = list(Task=contrast_mat))
# summary(PI_sp)
tab_model(PI_sp, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
PI_fr <-lmer(log(Plosion_index) ~ Group*Task + Gender + (1 + Task|Speaker) + (1 + Group| Word), data = french_b, contrasts = list(Task=contrast_mat))
# summary(PI_fr)
tab_model(PI_fr, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
B_fr <-lmer(log(Plosion_index) ~ Group*Task + Gender, data = french_b, contrasts = list(Task=contrast_mat))
B_fr <-lmer(log(Plosion_index) ~ Group*Task + Gender + (1|Speaker) + (1| Word), data = french_b, contrasts = list(Task=contrast_mat))
# summary(B_fr)
tab_model(B_fr, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
B_bi <-lmer(log(Plosion_index) ~ Language*Task + Gender + (1 + Language + Task|Speaker) + (1| Word), data = bi_b, contrasts = list(Task=contrast_mat))
# summary(B_bi)
tab_model(B_bi, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
B_fr <-lmer(log(Plosion_index) ~ Group + (1 + Group| Word), data = french_b, contrasts = list(Task=contrast_mat))
# summary(B_fr)
tab_model(B_fr, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
View(B_fr)
View(french_b)
B_fr <-lmer(log(Plosion_index) ~ Group*Task + Gender + (1 + Task|Speaker) + (1 + Group| Word), data = french_b, contrasts = list(Task=contrast_mat))
# summary(B_fr)
tab_model(B_fr, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(lme4)
library(emmeans)
library(rstatix) # Function rstatix::convert_as_factor
library(MASS) # Function MASS::fractions
library(sjPlot) # Function sjPlot::tab_model
data = as.data.frame(read.csv("matched_bb_data_18_02_2022.csv", sep=";"),header=T,sep=";",dec=".")
data$Plosion_index = as.numeric(data$Plosion_index)
data$VOT = as.numeric(data$VOT)
data$Length = as.numeric(data$Length)
str(data)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(lme4)
library(emmeans)
library(rstatix) # Function rstatix::convert_as_factor
library(MASS) # Function MASS::fractions
library(sjPlot) # Function sjPlot::tab_model
data = as.data.frame(read.csv("matched_bb_data_18_02_2022.csv", sep=";"),header=T,sep=";",dec=".")
data$Plosion_index = as.numeric(data$Plosion_index)
data$VOT = as.numeric(data$VOT)
data$Length = as.numeric(data$Length)
str(data)
# Make factors
data <- data %>% convert_as_factor(Speaker, Gender, Group, Task, Grapheme, Word)
data$Group <- relevel(data$Group, 'Monolinguals')
data$Grapheme <- relevel(data$Grapheme, 'b')
data_mono <- data[data$Group=="Monolinguals",]
data_bi <- data[data$Group=="Bilinguals",]
str(data)
# Separate data by language
french <- data[data$Language=="French",]
spanish <- data[data$Language=="Spanish",]
french_mono <- french_mono[french_mono$VOT < (mean(french_mono$VOT) + 2.5*sd(french_mono$VOT)),]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(lme4)
library(emmeans)
library(rstatix) # Function rstatix::convert_as_factor
library(MASS) # Function MASS::fractions
library(sjPlot) # Function sjPlot::tab_model
data = as.data.frame(read.csv("matched_bb_data_18_02_2022.csv", sep=";"),header=T,sep=";",dec=".")
data$Plosion_index = as.numeric(data$Plosion_index)
data$VOT = as.numeric(data$VOT)
data$Length = as.numeric(data$Length)
str(data)
# Make factors
data <- data %>% convert_as_factor(Speaker, Gender, Group, Task, Grapheme, Word)
data$Group <- relevel(data$Group, 'Monolinguals')
data$Grapheme <- relevel(data$Grapheme, 'b')
data_mono <- data[data$Group=="Monolinguals",]
data_bi <- data[data$Group=="Bilinguals",]
str(data)
# Separate data by language
french <- data[data$Language=="French",]
spanish <- data[data$Language=="Spanish",]
french_mono = data_mono[data_mono$Language=="French",]
spanish_mono = data_mono[data_mono$Language=="Spanish",]
french_bi = data_bi[data_bi$Language=="French",]
spanish_bi = data_bi[data_bi$Language=="Spanish",]
french_mono <- french_mono[french_mono$VOT < (mean(french_mono$VOT) + 2.5*sd(french_mono$VOT)),]
french_bi <- french_bi[french_bi$VOT < (mean(french_bi$VOT) + 2.5*sd(french_bi$VOT)),]
spanish_mono <- spanish_mono[spanish_mono$VOT < (mean(spanish_mono$VOT) + 2.5*sd(spanish_mono$VOT)),]
spanish_bi <- spanish_bi[spanish_bi$VOT < (mean(spanish_bi$VOT) + 2.5*sd(spanish_bi$VOT)),]
french_no_outliers <- rbind(french_mono, french_bi)
spanish_no_outliers <- rbind(spanish_mono, spanish_bi)
no_outliers <- rbind(spanish_no_outliers, french_no_outliers)
b_data <- no_outliers[no_outliers$Grapheme == "b",]
french_b <- b_data[b_data$Language == "French",]
spanish_b <- b_data[b_data$Language == "Spanish",]
bil_b <- b_data[b_data$Group == "Bilinguals",]
print("The mean prevoicing value for the French /b/-<b> of bilinguals is:")
print(mean(french_b[french_b$Group == "Bilinguals",]$VOT))
print("The mean prevoicing value for the French /b/-<b> of controls is:")
print(mean(french_b[french_b$Group == "Monolinguals",]$VOT))
print("The mean prevoicing value for the Spanish /b/-<b> of bilinguals is:")
mean(spanish_b[spanish_b$Group == "Bilinguals",]$VOT)
print("The mean prevoicing value for the Spanish /b/-<b> of controls is:")
mean(spanish_b[spanish_b$Group == "Monolinguals",]$VOT)
# Create contrasts
F_VS_M <- c(-1, 1)
Mono_VS_Bi <- c(-1, 1)
b_VS_v <- c(-1, 1)
contrasts(french$Gender) <- F_VS_M
contrasts(french$Group) <- Mono_VS_Bi
contrasts(french$Grapheme) <- b_VS_v
# Create contrasts
F_VS_M <- c(-1, 1)
Mono_VS_Bi <- c(-1, 1)
b_VS_v <- c(-1, 1)
contrasts(french$Gender) <- F_VS_M
contrasts(french$Group) <- Mono_VS_Bi
# contrasts(french$Grapheme) <- b_VS_v
contrasts(spanish$Gender) <- F_VS_M
contrasts(spanish$Group) <- Mono_VS_Bi
# contrasts(spanish$Grapheme) <- b_VS_v
# Custom contrast for task
Contrasts <- rbind(
Name_Vs_Rest = c(name=2, PW=-1, read=-1),
read_VS_PW = c(name=0, PW=1, read=-1)
)
# fractions(t(Contrasts))
# Function to calculate general inverse
ginv2 <- function(x)
fractions(provideDimnames(ginv(x),
base=dimnames(x)[2:1]))
contrast_mat <- ginv2(Contrasts)
# contrast_mat
# Mean center the data
french$VOT <- scale(french$VOT, scale = FALSE)
spanish$VOT <- scale(spanish$VOT, scale = FALSE)
french_b$VOT <- scale(french_b$VOT, scale = FALSE)
spanish_b$VOT <- scale(spanish_b$VOT, scale = FALSE)
bil_b$VOT <- scale(bil_b$VOT, scale = FALSE)
VOT_bi <-lmer(VOT ~ Language*Task + Gender + (1 + Language + Task|Speaker), data = bil_b, contrasts = list(Task=contrast_mat))
# summary(VOT_bi)
tab_model(VOT_bi, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
VOT_bi <-lmer(VOT ~ Language*Task + Gender + (1 + Language|Speaker), data = bil_b, contrasts = list(Task=contrast_mat))
# summary(VOT_bi)
tab_model(VOT_bi, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(lme4)
library(emmeans)
library(rstatix) # Function rstatix::convert_as_factor
library(MASS) # Function MASS::fractions
library(sjPlot) # Function sjPlot::tab_model
data = as.data.frame(read.csv("plosive_data_18_02_2022.csv", sep=";"),header=T,sep=";",dec=".")
data_matched = as.data.frame(read.csv("matched_bb_data_18_02_2022.csv", sep=";"),header=T,sep=";",dec=".")
data$Plosion_index = as.numeric(data$Plosion_index)
data$VOT = as.numeric(data$VOT)
data$Length = as.numeric(data$Length)
data_matched$Plosion_index = as.numeric(data_matched$Plosion_index)
data_matched$VOT = as.numeric(data_matched$VOT)
data_matched$Length = as.numeric(data_matched$Length)
# Make factors
data <- data %>% convert_as_factor(Speaker, Gender, Group, Task, Grapheme, Word)
data$Group <- relevel(data$Group, 'Monolinguals')
data$Grapheme <- relevel(data$Grapheme, 'b')
data_mono <- data[data$Group=="Monolinguals",]
data_bi <- data[data$Group=="Bilinguals",]
str(data)
# Separate data by language
french <- data[data$Language=="French",]
spanish <- data[data$Language=="Spanish",]
french_mono = data_mono[data_mono$Language=="French",]
spanish_mono = data_mono[data_mono$Language=="Spanish",]
french_bi = data_bi[data_bi$Language=="French",]
spanish_bi = data_bi[data_bi$Language=="Spanish",]
french_bi_matched = data_matched[data_matched$Language=="French" & data_matched$Group=="Bilinguals",]
spanish_bi_matched = data_matched[data_matched$Language=="Spanish" & data_matched$Group=="Bilinguals",]
french_mono <- french_mono[french_mono$VOT < (mean(french_mono$VOT) + 2.5*sd(french_mono$VOT)),]
french_bi <- french_bi[french_bi$VOT < (mean(french_bi$VOT) + 2.5*sd(french_bi$VOT)),]
spanish_mono <- spanish_mono[spanish_mono$VOT < (mean(spanish_mono$VOT) + 2.5*sd(spanish_mono$VOT)),]
spanish_bi <- spanish_bi[spanish_bi$VOT < (mean(spanish_bi$VOT) + 2.5*sd(spanish_bi$VOT)),]
french_no_outliers <- rbind(french_mono, french_bi)
spanish_no_outliers <- rbind(spanish_mono, spanish_bi)
no_outliers <- rbind(spanish_no_outliers, french_no_outliers)
b_data <- no_outliers[no_outliers$Grapheme == "b",]
french_b <- b_data[b_data$Language == "French",]
spanish_b <- b_data[b_data$Language == "Spanish",]
matched_french_bi <- french_bi_matched[french_bi_matched$VOT < (mean(french_bi_matched$VOT) + 2.5*sd(french_bi_matched$VOT)),]
matched_spanish_bi <- spanish_bi_matched[spanish_bi_matched$VOT < (mean(spanish_bi_matched$VOT) + 2.5*sd(spanish_bi_matched$VOT)),]
bil_b <- rbind(matched_french_bi, matched_spanish_bi)
print("The mean prevoicing value for the French /b/-<b> of bilinguals is:")
print(mean(french_b[french_b$Group == "Bilinguals",]$VOT))
print("The mean prevoicing value for the French /b/-<b> of controls is:")
print(mean(french_b[french_b$Group == "Monolinguals",]$VOT))
print("The mean prevoicing value for the Spanish /b/-<b> of bilinguals is:")
mean(spanish_b[spanish_b$Group == "Bilinguals",]$VOT)
print("The mean prevoicing value for the Spanish /b/-<b> of controls is:")
mean(spanish_b[spanish_b$Group == "Monolinguals",]$VOT)
# Create contrasts
F_VS_M <- c(-1, 1)
Mono_VS_Bi <- c(-1, 1)
b_VS_v <- c(-1, 1)
contrasts(french$Gender) <- F_VS_M
contrasts(french$Group) <- Mono_VS_Bi
# contrasts(french$Grapheme) <- b_VS_v
contrasts(spanish$Gender) <- F_VS_M
contrasts(spanish$Group) <- Mono_VS_Bi
# contrasts(spanish$Grapheme) <- b_VS_v
# Custom contrast for task
Contrasts <- rbind(
Name_Vs_Rest = c(name=2, PW=-1, read=-1),
read_VS_PW = c(name=0, PW=1, read=-1)
)
# fractions(t(Contrasts))
# Function to calculate general inverse
ginv2 <- function(x)
fractions(provideDimnames(ginv(x),
base=dimnames(x)[2:1]))
contrast_mat <- ginv2(Contrasts)
# contrast_mat
# Mean center the data
french$VOT <- scale(french$VOT, scale = FALSE)
spanish$VOT <- scale(spanish$VOT, scale = FALSE)
french_b$VOT <- scale(french_b$VOT, scale = FALSE)
spanish_b$VOT <- scale(spanish_b$VOT, scale = FALSE)
bil_b$VOT <- scale(bil_b$VOT, scale = FALSE)
VOT_bi <-lmer(VOT ~ Language*Task + Gender + (1 + Language|Speaker), data = bil_b, contrasts = list(Task=contrast_mat))
# summary(VOT_bi)
tab_model(VOT_bi, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
VOT_bi <-lmer(VOT ~ Language*Task + Gender + (1 + Language + Task|Speaker), data = bil_b, contrasts = list(Task=contrast_mat))
# summary(VOT_bi)
tab_model(VOT_bi, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
VOT_bi <-lmer(VOT ~ Language*Task + Gender + Length + (1 + Language + Task|Speaker), data = bil_b, contrasts = list(Task=contrast_mat))
# summary(VOT_bi)
tab_model(VOT_bi, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
VOT_bi <-lmer(VOT ~ Language*Task + Gender + Length + (1 + Language|Speaker), data = bil_b, contrasts = list(Task=contrast_mat))
# summary(VOT_bi)
tab_model(VOT_bi, show.se = TRUE, show.stat = TRUE, show.ci = NULL, show.re.var = FALSE)
